# default settings for scripting
if (!exists("rho_type")) rho_type <- v("perfect","madia","total")[3]
if (!exists("bd_prior")) bd_prior <- 10

# filenames
range_fn = "data/silversword.range.nex"
mol_fn   = "data/silversword.mol.nex"
tree_fn  = "data/silversword.init.tre"
out_fn   = "output/job_171108/simple_phy_ext.1"
geo_fn   = "data/n6/hawaii.n6"
times_fn = geo_fn + ".times.txt"
dist_fn  = geo_fn + ".distances.txt"



# output filename
out_fn   = "output/out.model_g0"
out_fn += ".bd_" + bd_prior
if (rho_type == "perfect") {
    out_fn += ".rho_perfect"
} else if (rho_type == "madia") {
    out_fn += ".rho_madia"
} else if (rho_type == "total") {
    out_fn += ".rho_total"
}

print("Saving work using the prefix \"" + out_fn + "\"")


# move/monitor index
mvi = 1
mni = 1
n_gen = 1e5
sample_freq = 50
under_prior = false


########
# data #
########

# read molecular data
dat_mol = readDiscreteCharacterData(mol_fn)

# read binary (01) presence-absence range data
dat_range_01 = readDiscreteCharacterData(range_fn)
n_areas <- dat_range_01.nchar()

# determine the number of states
max_areas <- 2
n_states <- 0
for (k in 0:max_areas) n_states += choose(n_areas, k)

# convert binary ranges into NaturalNumbers
dat_range_n = formatDiscreteCharacterData(dat_range_01, "DEC", n_states)

# epoch times
time_bounds <- readDataDelimitedFile(file=times_fn, delimiter=" ")
n_epochs <- time_bounds.size()
n_epochs <- 5

# area distances
distances <- readDataDelimitedFile(file=dist_fn, delimiter=" ")

# tree
tree_init = readTrees(tree_fn)[1]

# taxa
taxa = dat_mol.taxa()
n_taxa = taxa.size()
n_branches = 2 * n_taxa - 2

# get the converted state descriptions
state_desc = dat_range_n.getStateDescriptions()

# write the state descriptions to file
state_desc_str = "state,range\n"
for (i in 1:state_desc.size())
{
    state_desc_str += (i-1) + "," + state_desc[i] + "\n"
}
write(state_desc_str, file=out_fn+".state_labels.txt")

#####################
# Clade constraints #
#####################
#
# outgroup taxa:
outgroup_taxa = [
    "Kyhosia_bolanderi",
    "Raillardella_pringlei",
    "Adenothamnus_validus",
    "Arnica_mollis",
    "Hulsea_algida"
]


k = 1
for (i in 1:taxa.size()) {
    taxon_name = taxa[i].getSpeciesName()
    if ( !outgroup_taxa.contains( taxon_name ) ) {
        ingroup_taxa[k] = taxon_name
        k += 1
    }
}
constraints[1] = clade( ingroup_taxa )
for (i in 2:outgroup_taxa.size()) {
    constraints[i] = clade(constraints[i-1], outgroup_taxa[i-1])
}


###############
# Tree models #
###############

# root age
root_age ~ dnUniform(9.13, 22.85)
moves[mvi++] = mvScale(root_age, weight=15)

# Numbers from BGB:
#
# Anisocarpus, Carlquistia, Harmonia, Hemizonella, Jensia, Kyhosia, and Madia
#   59 species, 71 species + subspecies
#
# All taxa of subtribe Madiinae and the subtribes Arnicinae, Baeriinae, Hulseinae, and Venegasiinae
#   209 species, 255 species + subspecies

if (rho_type == "perfect") {
    rho <- 1
} else if (rho_type == "total") {
    rho <- taxa.size() / 255 # 0.1686275
} else if (rho_type == "madia") {
    rho <- ( taxa.size()-4 ) / 71 # 0.6056338
}
birth ~ dnExp(bd_prior)
moves[mvi++] = mvScale(birth, weight=3)

# death rate
death ~ dnExp(bd_prior)
moves[mvi++] = mvScale(death, weight=3)

div := birth - death
turnover := death / birth


# birth-death process
tree_dn = dnBDP(lambda=birth, mu=death, rho=rho, rootAge=root_age, taxa=taxa)
tree ~ dnConstrainedTopology(tree_dn, constraints)
tree.setValue(tree_init)
root_age.setValue(tree_init.rootAge())

# tree moves
moves[mvi++] = mvNNI(tree, weight=n_branches/2)
moves[mvi++] = mvFNPR(tree, weight=n_branches/8)
moves[mvi++] = mvNodeTimeSlideUniform(tree, weight=n_branches)

################
# Calibrations #
################

# constraint on age of arnica+Madiinae
age_arnica_madiinae := tmrca(tree, constraints[5])
min_age_arnica_madiinae <- 4.91
max_age_arnica_madiinae <- 16.59
width_age_prior_arnica_madiinae <- (max_age_arnica_madiinae - min_age_arnica_madiinae)/2.0
mean_age_prior_arnica_madiinae <- min_age_arnica_madiinae + width_age_prior_arnica_madiinae
obs_age_arnica_madiinae ~ dnUniform(age_arnica_madiinae - width_age_prior_arnica_madiinae, age_arnica_madiinae + width_age_prior_arnica_madiinae)
obs_age_arnica_madiinae.clamp( mean_age_prior_arnica_madiinae )

# constraint on age of Madiinae
age_madiinae := tmrca(tree, constraints[4])
min_age_madiinae <- 3.79
max_age_madiinae <- 14.14
width_age_prior_madiinae <- (max_age_madiinae - min_age_madiinae)/2.0
mean_age_prior_madiinae <- min_age_madiinae + width_age_prior_madiinae
obs_age_madiinae ~ dnUniform(age_madiinae - width_age_prior_madiinae, age_madiinae + width_age_prior_madiinae)
obs_age_madiinae.clamp( mean_age_prior_madiinae )


###################
# Molecular model #
###################

# molecular clock
log10_rate_mol ~ dnUniform(-6,2)
log10_rate_mol.setValue(-1)
moves[mvi++] = mvSlide(log10_rate_mol, weight=10, delta=0.1)
moves[mvi++] = mvSlide(log10_rate_mol, weight=5, delta=0.5)
rate_mol := 10^log10_rate_mol

# iid effective population sizes per branch
num_rate_categories <- 32
rate_probs <- simplex(rep(1,num_rate_categories))
step_size = round(num_rate_categories/4)

# branch rates draw from a discretized Lognormal (k=32)
branch_sd ~ dnExp(1)
branch_sd.setValue(1)
moves[mvi++] = mvScale(branch_sd, weight=10, lambda=0.1)
moves[mvi++] = mvScale(branch_sd, weight=3, lambda=1)

branch_mean := ln(rate_mol) - 0.5 * branch_sd^2
rate_distribution = dnLognormal(branch_mean, branch_sd)
rate_categories := fnDiscretizeDistribution(rate_distribution, num_rate_categories)

for (i in 1:n_branches) {
    branch_rates[i] ~ dnMixture(rate_categories, rate_probs)
    branch_rates[i].setValue( rate_categories[ floor(num_rate_categories/2) ] )
    moves[mvi++] = mvMixtureAllocation(branch_rates[i], weight=1., delta=step_size)
}

# HKY substitution process
kappa ~ dnGamma(2,2)
moves[mvi++] = mvScale(kappa, weight=2)
bf ~ dnDirichlet( [1,1,1,1] )
moves[mvi++] = mvSimplexElementScale(bf, alpha=10, weight=4)
Q_mol := fnHKY(kappa, bf)

# +Gamma-4 among site rate variation
alpha ~ dnUniform(0,50)
moves[mvi++] = mvScale(alpha, weight=2)
site_rates := fnDiscretizeGamma(alpha, alpha, numCats=4)

# substitution process over phylogeny
seq_mol ~ dnPhyloCTMC(Q=Q_mol,
                      tree=tree,
                      branchRates=branch_rates,
                      siteRates=site_rates,
                      type="DNA",
                      nSites=dat_mol.nchar())

# observe multiple sequence alignemnt
seq_mol.clamp(dat_mol)

#######################
# Biogeography models #
#######################

rate_bg <- 1.0

# dispersal rate
dispersal_rate ~ dnExp(5)
moves[mvi++] = mvScale(dispersal_rate, weight=4)

# extirpation rate
extirpation_rate ~ dnExp(5)
moves[mvi++] = mvScale(extirpation_rate, weight=4)

# the relative dispersal and extirpation rate matrices
for (i in 1:n_areas) {
    for (j in 1:n_areas) {
        er[i][j] <- 0.0
        dr[i][j] := dispersal_rate
    }
    er[i][i] := extirpation_rate
}

# build DEC rate matrices
Q_DEC := fnDECRateMatrix(dispersalRates=dr,
                         extirpationRates=er,
                         maxRangeSize=max_areas)
    
# build cladogenetic transition probabilities
clado_event_types <- [ "s", "a" ]
p_sympatry ~ dnUniform(0,1)
p_allopatry := abs(1.0 - p_sympatry)
moves[mvi++] = mvSlide(p_sympatry, delta=0.1, weight=2)
clado_event_probs := simplex(p_sympatry, p_allopatry)
P_DEC := fnDECCladoProbs(eventProbs=clado_event_probs,
                         eventTypes=clado_event_types,
                         numCharacters=n_areas,
                         maxRangeSize=max_areas)

# root frequencies
rf_DEC_raw            <- rep(0, n_states)
rf_DEC_raw[n_areas+1] <- 1  # Mainland (Z) is the only possible starting state
rf_DEC                <- simplex(rf_DEC_raw)


# the phylogenetic CTMC with cladogenetic events
m_bg ~ dnPhyloCTMCClado(tree=tree,
                           Q=Q_DEC,
                           cladoProbs=P_DEC,
                           branchRates=rate_bg,
                           rootFrequencies=rf_DEC,
                           type="NaturalNumbers",
                           nSites=1)

# attach the range data    
m_bg.clamp(dat_range_n)

# build the epoch times
# NOTE: we do not use an epoch model, but we're still interested in when the islands originated
for (i in 1:n_epochs) {
    time_max[i] <- time_bounds[i][1]
    time_min[i] <- time_bounds[i][2]

    if (i == n_epochs) {
        epoch_times[i] <- 0.0
    } else {
        epoch_times[i] ~ dnUniform(time_min[i], time_max[i])
        moves[mvi++] = mvSlide(epoch_times[i], delta=abs(time_bounds[i][1]-time_bounds[i][2])/2)
    }
}



############
# Monitors #
############

# monitor the age of the silversword ingroup
ingroup_clade <- clade("Wilkesia_hobdyi",
                       "Dubautia_reticulata",
                       "Dubautia_microcephala",
                       "Argyroxiphium_caliginis")

ingroup_age := tmrca(tree, ingroup_clade)
for (i in 1:n_epochs) {
    ingroup_older_island[i] := ifelse( ingroup_age > epoch_times[i], 1, 0 )
}


monitors[mni++] = mnScreen(printgen=1, ingroup_age)
monitors[mni++] = mnModel(file=out_fn+".model.log", printgen=sample_freq)
monitors[mni++] = mnFile(tree, filename=out_fn+".tre", printgen=sample_freq)
monitors[mni++] = mnStochasticCharacterMap(ctmc=m_bg, filename=out_fn+".stoch.log",printgen=sample_freq)
monitors[mni++] = mnJointConditionalAncestralState(tree=tree,
                                                       ctmc=m_bg,
                                                       type="NaturalNumbers",
                                                       withTips=true,
                                                       withStartStates=true,
                                                       filename=out_fn+".states.log",
                                                       printgen=sample_freq)

############
# Analysis #
############

# build the model analysis object from the model graph
mymodel = model(m_bg, ingroup_older_island, epoch_times)

# create the MCMC analysis object
mymcmc = mcmc(mymodel, monitors, moves)

# run the MCMC analysis
mymcmc.run(n_gen, underPrior=under_prior)


# exit
quit()
